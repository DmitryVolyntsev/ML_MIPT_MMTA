Скольким из вас приходилось использовать электронные таблицы, такие как Microsoft Excel? Очень хорошо! А многие ли из вас управляли бизнесом при помощи таблиц, написанных от руки, как делал мой отец в своей небольшой типографии в Филадельфии? Намного меньше.
Таким способом это делали сотни лет. В начале 1978 года я начал работать над идеей, которая в итоге воплотилась в программу VisiCalc. И через год она стала поставляться вместе с некой новинкой, названной «персональный компьютер Apple II». Можно сказать, что всё действительно изменилось, когда 6 лет спустя в Wall Street Journal вышла редакционная статья, предполагавшая, что вы знаете о VisiCalc и, может, даже её используете.
В 1990 году Стив Джобс сказал, что «электронные таблицы стимулировали развитие индустрии». «VisiCalc способствовала успеху Apple намного больше, чем любое другое событие». От себя лично Стив сказал: «Если бы VisiCalc была написана для другого компьютера, вы бы сейчас брали интервью у кого-то ещё».
Так VisiCalc посодействовала появлению ПК на рабочих местах в бизнесе. Как это произошло? Что это было? Через что я прошёл, чтобы сделать её такой? Впервые я стал учиться программированию в 1966 году, когда мне было 15 лет, — всего пару месяцев после этого фото. В те дни немногие старшеклассники имели доступ к компьютерам. Но благодаря удаче и огромной настойчивости мне удавалось проводить время за компьютером по всему городу.
Проведя ночи в грязи на Вудстоке, я отправился учиться в МИТ. И там, чтобы заработать деньги, я работал в проекте Multics. Multics был новаторской интерактивной системой с разделением времени. Вы слышали об операционных системах Linux и Unix? Они произошли от Multics. Я работал над версиями Multics, известными как интерпретируемые компьютерные языки, которые использовали люди в некомпьютерных сферах, чтобы делать свои расчёты, находясь за компьютерными терминалами.
После окончания МИТа я стал работать на Digital Equipment Corporation. [DEC] В DEC я создавал программу для новой области компьютерного набора текста. Я помогал газетам заменить репортёрские печатные машинки компьютерными терминалами. Я писал программу, а затем проводил полевые испытания в таких изданиях, как Kansas City Star, где я обучал пользователей и получал обратную связь. Это был опыт знакомства с реальным миром, который довольно отличался от того, что я видел в лаборатории МИТа.
После я был руководителем проекта по созданию первого текстового редактора для DEC. Опять новая сфера. Как и в случае с набором текста, важно было создать пользовательский интерфейс, который стал бы простым и эффективным для людей, далёких от компьютеров. После DEC я перешёл в небольшую компанию, делавшую микропроцессорные электоронные кассовые аппараты для индустрии фастфуда. Но я всегда хотел основать компанию с моим другом Бобом Фрэнкстоном, с которым я познакомился в проекте Multics в МИТе.
Поэтому я решил вернуться к учёбе, чтобы узнать всё, что возможно, о бизнесе. И осенью 1977 года я поступил на программу MBA в Гарвардской школе бизнеса. Я был одним из немногих студентов, обладавших знаниями о компьютерном программировании. Вот фото из выпускного альбома, где я сижу в переднем ряду.
(Смех)
В Гарварде мы учились методом анализа конкретных кейсов. Мы разбирали три кейса в день. Кейсы состояли из нескольких десятков страниц с описанием неких бизнес-ситуаций. К кейсам часто шли приложения и в них часто были слова и числа, описывающие решения, имеющие смысл для конкретной ситуации. Решения, как правило, были различными. Это моя домашняя работа. Снова числа и слова, раскрывающие решения, которые имеют смысл. Масса вычислений — мы с ними действительно сроднились. Кстати, вот мой калькулятор. На Хэллоуин я пришёл одетый в костюм калькулятора.
(Смех)
В начале каждого занятия профессор вызывал кого-нибудь, чтобы представить кейс. И тот, кого вызвали, должен был объяснить, в чём дело, и затем диктовал информацию, которую профессор записывал перед классом на многочисленных моторизованных досках, и дальше у нас шло обсуждение. Крайне неприятно было, когда ты делал всю домашнюю работу и назавтра приходил только для того, чтобы обнаружить ошибку и что все остальные сделанные тобой подсчёты неверны. И что ты не можешь участвовать. А нас оценивали по участию в занятиях.
И вот, сидя в классе вместе с 87 другими людьми, мне приходилось много мечтать. Большинство программистов в те дни работали с большими ЭВМ, создавая системы управления запасами, расчёта зарплаты и оплаты счетов. Но я работал над интерактивным текстовым редактором и персональными вычислениями по запросу. Вместо того чтобы думать о бумажных распечатках и перфокартах, я представлял волшебную доску, где, если вы удалили одно число и вписали новое, все остальные числа тоже автоматически изменятся — такой текстовый редактор для чисел. Я представлял, что у моего калькулятора внизу есть разъём для мыши и проекционный дисплей, как в истребителе. И я могу ввести какие-то числа, обвести их и нажать кнопку «сумма». И прямо посреди переговоров я могу получить ответ. Теперь мне оставалось только превратить свою мечту в реальность.
Мой отец научил меня созданию прототипов. Он показал мне макеты, которые он делал, чтобы понять как размещаются на странице элементы в брошюрах, которые он печатал. Он использовал их для получения обратной связи от заказчиков и для получения подтверждения перед отправкой в печать. Акт создания простой, работающей версии того, что вы пытаетесь построить, заставляет вас раскрыть ключевые проблемы и позволяет найти решения этим проблемам менее затратным способом.
Поэтому я решил сделать прототип. Я отправился к видеотерминалу Гарвардской системы с разделением времени и взялся за работу. Одной из первых проблем, с которой я столкнулся, была: «Как отображать значения в формулах?» Позвольте показать, что я имею в виду. Я думал, что вы выберете какую-то точку, введёте какие-то слова, потом наберёте что-то ещё в другом месте. Введёте какие-то числа, а затем ещё и укажете, где вы хотите видеть ответ. Затем выберете первое число, нажмёте минус, выберете второе и получите результат. Проблема вот в чём: что я должен включить в формулу? Нечто такое, чтобы компьютер знал, что ему нужно взять, а вы, если посмотрите на формулу, могли понять, на что она ссылается на экране. Сначала я подумал было сделать так, как бы это сделал программист. Первый раз, когда вы куда-то указываете, компьютер просит вас ввести уникальное имя. Очень быстро стало ясно, что это слишком утомительно. Компьютер должен был автоматически создавать имя и помещать его внутрь. И я подумал: а почему бы не давать имена по мере ввода данных. Я попробовал. Значение 1, значение 2. Я сразу понял, что если у вас больше, чем несколько значений, вы никогда не запомните, где и что у вас на экране.
И я решил, а что, если вместо того, чтобы давать вам ставить значения где угодно, я ограничу вас сеткой? И когда вы будете указывать на ячейку, компьютер присвоит ей имя, зависящее от строки и столбца. И если выполнить это в виде карты, поместив буквы сверху, а цифры сбоку, тогда, увидев в формуле B7, вы будете точно знать, где это на экране. И если вам потребуется самим составить формулу, вы будете знать, что делать. Ограничение сеткой помогло мне решить проблему. Это также открыло новые возможности, такие как задание диапазона ячеек. Но это и не слишком вас ограничивало — можно по-прежнему вписать любое значение, любую формулу в любую ячейку. И этот способ мы используем и поныне, почти 40 лет спустя.
Мой друг Боб и я решили, что мы хотим создать этот продукт вместе. Я провёл дополнительную работу, выясняя, как должна себя вести программа. Я написал справочные карточки, которые служили документацией. Это также помогло мне убедиться, что интерфейс пользователя, задаваемый мной, можно понятно и кратко объяснить обычным людям, Боб работал на чердаке квартиры, которую снимал в Арлингтоне, штат Массачусетс. Вот фото внутри чердака. Боб купил время в системе MIT Multics, чтобы написать программный код на терминале типа этого. Затем он загружал тестовые версии на взятый взаймы Apple II через телефонную линию, используя акустический переходник, и затем мы их проверяли.
Для одного из тестов я подготовил кейс о рекламной кампании Pepsi Challenge. Функция «Печать» ещё не работала, и мне приходилось всё копировать вручную. «Сохранение» не работало, поэтому, когда всё висло, я должен был вбивать все формулы снова, снова и снова. На следующем занятии я поднял руку, меня вызвали, и я представил кейс. Я сделал пятилетние прогнозы. Я сделал все виды различных сценариев. Я блестяще справился кейсом. VisiCalc уже была полезна.
Профессор спросил: «Как вы это сделали?» Но я не хотел говорить ему о нашей секретной программе.
(Смех)
И я сказал: «Я взял это, сложил с этим и умножил на это и вычел вот то».
Он ответил: «Ну а почему вы не применили пропорцию?»
Я сказал: «Ха! Пропорция — это было бы не настолько точно!» И я не сказал: «Функция деления ещё не работает».
(Смех)
Однако в конце концов мы завершили VisiCalc в достаточной мере, чтобы суметь показать её публике. Мой отец напечатал справочную карточку, и мы могли использовать её как рекламный материал.
В июне 1979 года наш издатель представил миру VisiCalc на маленьком стенде огромной Национальной компьютерной конференции в Нью-Йорке. «Нью-Йорк таймс» опубликовала о конференции юмористическую статью. «Машины проводят нечто похожее на религиозные обряды... Когда верующие ещё только собираются, в комнате символов Колизея художники добавляют к пантеону аккуратную надпись VISICALC огромными чёрными буквами на жёлтом фоне. Да здравствует VISICALC!» (Ахает) «Нью-Йорк таймс»: «Да здравствует VISICALC!»
(Смех)
Это стало последним упоминанием электронных таблиц в популярной деловой прессе в течение 2 лет. Большинство ещё не поняли, что это. Но некоторые смогли.
В октябре 1979-го мы выпустили VisiCalc. Она поставлялась в упаковке, которая выглядела вот так. А вот так она работала на компьютере Apple II. Остальное, как говорится, история.
Можно ужасно много добавить к этому рассказу, но стоит отложить это на другой раз. И ещё кое-что. Гарвард помнит. Вот та классная комната. Они установили мемориальную доску в память о том, что здесь происходило.
(Аплодисменты)
Но это служит также напоминанием, что вы тоже должны использовать ваш уникальный опыт, навыки и потребности и строить прототипы, чтобы открывать и решать ключевые проблемы и благодаря этому изменить мир.
Спасибо.
(Аплодисменты)
TED.com translations are made possible by volunteer translators. Learn more about the Open Translation Project.
© TED Conferences, LLC. All rights reserved.