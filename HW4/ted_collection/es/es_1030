¿Cuántos de Uds. han usado una hoja de cálculo electrónica, como Microsoft Excel? Muy bien. Ahora, ¿cuántos han dirigido un negocio con una hoja de cálculo a mano, como hizo mi padre en su pequeña imprenta en Filadelfia? Muchos menos.
Bueno, así se hizo durante cientos de años. A principios de 1978, empecé a trabajar en una idea que al final se convirtió en VisiCalc. Y al año siguiente se distribuyó en algo nuevo llamado computadora personal Apple II. Podría decirse que las cosas realmente habían cambiado, 6 años después, The Wall Street Journal publicó una editorial que suponía que uno conocía VisiCalc y quizá incluso la usaba.
Steve Jobs en 1990 dijo que las "hojas de cálculo impulsaron la industria". "VisiCalc impulsó el éxito de Apple más que cualquier otro acontecimiento". En una nota más personal, Steve dijo "Si VisiCalc se hubiese escrito para alguna otra computadora, quizá estarías entrevistando a otra persona en este momento".
VisiCalc fue instrumental para llevar las PC a los escritorios de negocios. ¿Cómo ocurrió? ¿Cómo fue? ¿Qué tuve que pasar para hacer que fuera lo que fue? Bueno, primero aprendí a programar en 1966, a mis 15 años, un par de meses después de esta foto. Pocos estudiantes de secundaria tenían acceso a computadoras en esos días. Pero con suerte y mucha perseverancia, pude tener tiempo de cómputo en la ciudad.
Tras dormir en el lodo en Woodstock, fui al MIT a la universidad, donde, para ganar dinero, trabajé en el Proyecto Multics. Multics era un sistema interactivo pionero de tiempo compartido. ¿Han oído hablar de Linux y los sistemas operativos Unix? Surgieron de Multics. Trabajé en las versiones de Multics de lo que se conoce como lenguajes informáticos interpretados, usados por personas en campos no computacionales para hacer sus cálculos en una terminal informática.
Después de graduarme del MIT, Fui a trabajar a Digital Equipment Corporation. En DEC, trabajé en software en el área nueva de tipografía computarizada. Ayudé a los periódicos a reemplazar las máquinas de escribir de sus periodistas por terminales de computadora. Escribía el software y luego salía al campo a lugares como The Kansas City Star, donde entrenaba a los usuarios y obtenía retroalimentación. Fue una experiencia del mundo real muy diferente a lo que vi en el laboratorio del MIT.
Después de eso, fui jefe de proyecto del primer procesador de texto de DEC, nuevamente un nuevo campo. Como con la tipografía, lo importante era crear una interfaz de usuario natural y eficiente para que usaran personas que no usaban computadoras. Después de estar en DEC, trabajé para una pequeña empresa que hacía cajas registradoras con microprocesadores para casas de comida rápida. Pero siempre había querido crear una empresa con mi amigo Bob Frankston que conocí en el proyecto Multics en el MIT.
Decidí volver a estudiar para aprender lo que pudiera sobre negocios. Y en el otoño de 1977, entré en el programa de MBA en la Escuela de Negocios de Harvard. Yo era uno del poco porcentaje de estudiantes que tenía formación en programación de computadoras. Hay una foto mía del anuario sentado en la primera fila.
(Risas)
Ahora, en Harvard, aprendíamos mediante el método por casos. Analizábamos tres casos al día. Los casos tienen decenas de páginas con situaciones de negocio particulares. A menudo tienen exposiciones, y estas suelen tener palabras y números diseñados de manera que tenga sentido para la situación particular. Por lo general son algo diferentes. Esta es mi tarea. Nuevamente, números, palabras, en formas que tuvieran sentido. Muchos cálculos, usábamos mucho nuestras calculadoras. De hecho, esta es mi calculadora. Para Halloween, fui disfrazado de calculadora.
(Risas)
Al principio de cada clase, el profesor llamaba a alguien para presentar el caso. Explicaban lo que ocurría y luego dictaban información que el profesor transcribía en las muchas pizarras motorizadas del frente de la clase, y luego teníamos una discusión. Una de las cosas realmente frustrantes tras haber hecho toda tu tarea, era al otro día darte cuenta de que habías cometido un error y todas las cuentas siguientes estaban mal. Y no podías participar. Y nos puntuaban por la participación en clase.
Sentado allí con otras 87 personas en clase, soñé mucho despierto. La mayoría de los programadores en esa época trabajaba en mainframes, hacían sistemas de inventario, sistemas de nómina y sistemas de pago de facturas. Pero yo había trabajado en procesamiento interactivo de textos y en computación personal a la carta. En vez de pensar en impresiones de papel y tarjetas perforadas, imaginé una pizarra mágica en la que si uno borraba un número y escribía algo nuevo, los otros números cambiaban de manera automática, como el procesamiento de palabras pero con números. Imaginé que mi calculadora tenía un ratón en la parte inferior y una pantalla como un avión de combate. Podía escribir algunos números, marcarlos y presionar el botón de suma. Y en medio de una negociación podía obtener la respuesta. Ahora tenía que convertir mi fantasía en realidad.
Mi padre me enseñó sobre prototipos. Me mostró maquetas que había hecho para averiguar la ubicación en la página de las cosas para los folletos que estaba imprimiendo. Las usaba para tener retroalimentación de los clientes y verificación antes de enviar el trabajo a la imprenta. Hacer una versión simple que funciona de lo que se intenta construir obliga a descubrir problemas clave. Y permite encontrar soluciones menos costosas a esos problemas.
Así que decidí crear un prototipo, con una terminal de video conectada al sistema de tiempo compartido de Harvard y me puse a trabajar. Uno de los primeros problemas que encontré fue: ¿Cómo representar los valores en las fórmulas? Les mostraré qué quiero decir. Pensé que uno apuntaba a algún lado, escribía alguna palabra, luego ingresaba algo en otro sitio, ingresaba números y más números, apuntaba dónde quería la respuesta. Y luego apuntaba al primero, presionaba menos, apuntaba al segundo, y obtenía el resultado. El problema era: ¿Qué debo poner en la fórmula? Tenía que ser algo que la computadora supiera. Y si miramos la fórmula, debía saber a qué lugar de la pantalla hacía referencia. Lo primero que pensé fue cómo lo haría un programador. La primera vez que apuntabas a algo, la computadora pedía que ingreses un nombre único. Era bastante fácil de ver rápidamente que sería algo tedioso. La computadora tenía que inventar por dentro el nombre de forma automática. Así que pensé, ¿por qué no hacerlo en el orden en que se crean? Probé eso. Valor 1, valor 2. Bastante rápidamente vi que con más de unos pocos valores nunca recordaría dónde estarían las cosas en la pantalla.
Luego dije, ¿por qué en vez de permitir poner valores por doquier no lo restrinjo a una grilla? Luego uno apunta a una celda, la computadora pondría el nombre con la fila y la columna. Y, si lo hacía como un mapa y ponía ABC arriba y los números a un lado, si uno veía B7 en una fórmula, sabría exactamente dónde estaba en la pantalla. Y si uno tenía que ingresar la fórmula, sabría qué hacer. Restringirse a la grilla ayudaba a resolver el problema. También abría nuevas capacidades, como tener rangos de celdas. Pero no era demasiado restrictiva... uno podía poner cualquier valor, cualquier fórmula, en cualquier celda. Y de ese modo lo hacemos hasta hoy, casi 40 años después.
Con mi amigo Bob decidimos construir este producto juntos. Yo trabajé más en cómo exactamente funcionaría el programa. Escribí una tarjeta de referencia como documentación. También me ayudó a asegurar que la interfaz de usuario que definí pudiera explicarse de manera concisa y clara para personas comunes. Bob trabajó en el ático del apartamento que alquiló en Arlington, Massachusetts. Este es el interior del ático. Bob compró tiempo en el sistema Multics del MIT para escribir el código en una terminal como esta. Y luego descargaba versiones de prueba a una Apple II prestada a través de una línea telefónica que usaba un acoplador acústico, y luego probábamos.
Para una de estas pruebas preparé este caso sobre el Desafío Pepsi. La impresión todavía no funcionaba, así que tuve que copiar todo. Guardar no funcionaba, por eso cada vez que se colgaba, tenía que volver a escribir las fórmulas una y otra vez. Al día siguiente en clase, levanté la mano; me llamaron y presenté el caso. Presenté proyecciones a 5 años. Presenté todo tipo de escenarios. El caso fue un éxito. VisiCalc ya era útil.
El profesor dijo: "¿Cómo lo hiciste?" Bueno, no quería contarle sobre el programa secreto.
(Risas)
Por eso le dije: "Tomé esto y sumé esto y lo multipliqué por esto y resté eso".
Él dijo: "Bueno, ¿por qué no usaste una proporción?"
Dije: "¡Ah! Una proporción... ¡No habría sido tan exacto!" Lo que no dije fue: "La división todavía no funciona".
(Risas)
Finalmente, sin embargo, ultimamos VisiCalc como para mostrarla en público. Mi padre imprimió una muestra de tarjeta de referencia que podríamos usar como material de marketing.
En junio de 1979, nuestro editor anunció VisiCalc al mundo, en un pequeño stand de la Conferencia National de Computadoras en Nueva York. The New York Times sacó un artículo humorístico sobre la conferencia. "Las máquinas realizan algo semejante a ritos religiosos... Conforme los creyentes se congregan, los pintores en la sala Coliseo aportan al panteón, ponen "VISICALC" minuciosamente en gigante negro sobre amarillo. ¡Loas a VISICALC!" (Con sorpresa) New York Times: ¡Loas a VISICALC!"
(Risas)
Esa fue la última mención a la hoja de cálculo electrónica en la prensa empresarial popular durante unos dos años. Algunos no lo entendieron entonces. Pero algunos sí.
En octubre de 1979, lanzamos VisiCalc. Tenía este embalaje. Y así lucía en la Apple II. El resto, como dicen, es historia.
Tengo mucho más para contar, pero tendrá que ser otro día. Una cosa, sin embargo, recuerda Harvard. Este es el aula. Pusieron una placa para conmemorar lo ocurrido allí.
(Aplausos) Pero también sirve de recordatorio de que Uds., también, deben tomar su propia formación, habilidades y necesidades y crear prototipos para descubrir y solucionar los problemas clave, y así, cambiar el mundo. Gracias. (Aplausos)
TED.com translations are made possible by volunteer translators. Learn more about the Open Translation Project.
© TED Conferences, LLC. All rights reserved.